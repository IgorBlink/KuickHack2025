import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import './ResultsPage.css';
import logo from '../../assets/logo.png';
import { FaVolumeUp, FaExpand, FaUsers } from 'react-icons/fa';

const ResultsPage = () => {
  const { gameCode } = useParams();
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState('leaderboard');
  const [participants, setParticipants] = useState([]);
  const [classAccuracy, _setClassAccuracy] = useState(69);
  
  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  useEffect(() => {
    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    const mockParticipants = [
      { 
        id: 1, 
        name: 'Vanilla Valjean', 
        score: 5100, 
        avatar: 'üßÅ',
        correctPercentage: 85, 
        wrongPercentage: 15,
        streak: 1
      },
      { 
        id: 2, 
        name: 'Acorn Artemis', 
        score: 4200, 
        avatar: 'üêøÔ∏è',
        correctPercentage: 70, 
        wrongPercentage: 30,
        streak: 2
      },
      { 
        id: 3, 
        name: 'Fenugreek Fudge', 
        score: 3600, 
        avatar: 'üç´',
        correctPercentage: 65, 
        wrongPercentage: 35,
        streak: 0
      },
      { 
        id: 4, 
        name: 'Mint Moriarty', 
        score: 3000, 
        avatar: 'üßä',
        correctPercentage: 55, 
        wrongPercentage: 45,
        streak: 0
      }
    ];
    
    setParticipants(mockParticipants);
  }, []);
  
  // –ú–æ–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const mockQuestions = [
    {
      id: 1,
      text: '–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?',
      correctAnswer: '–Æ–ø–∏—Ç–µ—Ä',
      statistics: {
        correct: 75,
        incorrect: 25
      }
    },
    {
      id: 2,
      text: '–ö–∞–∫–æ–µ —Ö–∏–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞?',
      correctAnswer: 'Au',
      statistics: {
        correct: 65,
        incorrect: 35
      }
    },
    {
      id: 3,
      text: '–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –ø–æ –ø–ª–æ—â–∞–¥–∏?',
      correctAnswer: '–†–æ—Å—Å–∏—è',
      statistics: {
        correct: 85,
        incorrect: 15
      }
    },
    {
      id: 4,
      text: '–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª "–í–æ–π–Ω–∞ –∏ –º–∏—Ä"?',
      correctAnswer: '–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π',
      statistics: {
        correct: 60,
        incorrect: 40
      }
    }
  ];
  
  useEffect(() => {
    // –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (participants.length > 0) {
      const totalAccuracy = participants.reduce((sum, participant) => 
        sum + participant.correctPercentage, 0);
      const averageAccuracy = Math.round(totalAccuracy / participants.length);
      _setClassAccuracy(averageAccuracy);
    }
  }, [participants]);
  
  const handleEndGame = () => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API-–∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
    navigate('/');
  };
  
  const handlePauseGame = () => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø–∞—É–∑–∞ –∏–≥—Ä—ã
    console.log('Game paused');
  };
  
  return (
    <div className="results">
      {/* –§–æ–Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
      <div className="results__background">
        <div className="results__stars"></div>
        <div className="results__stars-2"></div>
        <div className="results__stars-3"></div>
      </div>
      
      {/* –•–µ–¥–µ—Ä */}
      <div className="results__header">
        <div className="results__logo">
          <img src={logo} alt="Quizizz" className="results__logo-image" />
        </div>
        
        <div className="results__join-code">
          <div className="results__join-code-label">JOIN CODE</div>
          <div className="results__join-code-value">{gameCode || '404 364'}</div>
        </div>
        
        <div className="results__controls">
          {/* <button className="results__theme-button">
            <span className="results__theme-icon">üé®</span>
            Themes
          </button> */}
          <button className="results__audio-button">
            <FaVolumeUp />
          </button>
          <button className="results__fullscreen-button">
            <FaExpand />
          </button>
          {/* <button 
            className="results__pause-button"
            onClick={handlePauseGame}
          >
            <span className="results__pause-icon">‚ö°</span>
            Pause
          </button> */}
          {/* <button 
            className="results__end-button"
            onClick={handleEndGame}
          >
            End
          </button> */}
        </div>
      </div>
      
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="results__main">
        {/* –ü–æ–ª–æ—Å—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
        <div className="results__progress-container">
          <div className="results__progress results__progress--correct" style={{ width: `${classAccuracy}%` }}></div>
          <div className="results__progress results__progress--incorrect" style={{ width: `${100 - classAccuracy}%` }}></div>
        </div>
        
        {/* –ü—Ä–æ—Ü–µ–Ω—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∞ */}
        <div className="results__accuracy">
          <div className="results__accuracy-circle">
            <div className="results__accuracy-value">{classAccuracy}%</div>
            <div className="results__accuracy-label">Class<br />Accuracy</div>
          </div>
        </div>
        
        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="results__tabs">
          <button 
            className={`results__tab ${activeTab === 'leaderboard' ? 'results__tab--active' : ''}`}
            onClick={() => setActiveTab('leaderboard')}
          >
            Leaderboard
          </button>
          <button 
            className={`results__tab ${activeTab === 'questions' ? 'results__tab--active' : ''}`}
            onClick={() => setActiveTab('questions')}
          >
            Questions
          </button>
        </div>
        
        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ Leaderboard */}
        {activeTab === 'leaderboard' && (
          <div className="results__leaderboard">
            <div className="results__participants-count">
              <FaUsers /> {participants.length} participants
            </div>
            
            <div className="results__table">
              <div className="results__table-header">
                <div className="results__header-rank">Rank</div>
                <div className="results__header-name">Name</div>
                <div className="results__header-score">Score</div>
                <div className="results__header-progress"></div>
              </div>
              
              {participants.map((participant, index) => (
                <div key={participant.id} className="results__table-row">
                  <div className="results__cell-rank">{index + 1}</div>
                  <div className="results__cell-player">
                    <div className="results__player-avatar">{participant.avatar}</div>
                    <div className="results__player-name">{participant.name}</div>
                  </div>
                  <div className="results__cell-score">{participant.score}</div>
                  <div className="results__cell-progress">
                    <div className="results__player-progress">
                      <div 
                        className="results__progress-correct" 
                        style={{width: `${participant.correctPercentage}%`}}
                      >
                        {participant.streak > 0 && (
                          <div className="results__streak-badge">‚ö°{participant.streak}</div>
                        )}
                      </div>
                      <div 
                        className="results__progress-incorrect" 
                        style={{width: `${participant.wrongPercentage}%`}}
                      ></div>
                      <div 
                        className="results__progress-empty" 
                        style={{width: `${100 - participant.correctPercentage - participant.wrongPercentage}%`}}
                      ></div>
                    </div>
                  </div>
                  <div className="results__cell-action">√ó</div>
                </div>
              ))}
            </div>
          </div>
        )}
        
        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ Questions */}
        {activeTab === 'questions' && (
          <div className="results__questions">
            <div className="results__questions-list">
              {mockQuestions.map((question, index) => (
                <div key={question.id} className="results__question-item">
                  <div className="results__question-number">Q{index + 1}</div>
                  <div className="results__question-content">
                    <div className="results__question-text">{question.text}</div>
                    <div className="results__question-answer">
                      <span className="results__answer-label">–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:</span> {question.correctAnswer}
                    </div>
                    <div className="results__question-stats">
                      <div className="results__stats-bar">
                        <div 
                          className="results__stats-correct" 
                          style={{width: `${question.statistics.correct}%`}}
                        >
                          {question.statistics.correct}%
                        </div>
                        <div 
                          className="results__stats-incorrect" 
                          style={{width: `${question.statistics.incorrect}%`}}
                        >
                          {question.statistics.incorrect}%
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ResultsPage; 